include:
- container-image/variables.gitlab-ci.yml
- generic/variables.gitlab-ci.yml

variables:
  KANIKO_IMAGE: dkr.gtl.net/dkr/devops-tools-kaniko-job-runner

.kaniko build container image job:
  stage: build
  resource_group: ${CI_COMMIT_REF_SLUG}
  image: ${KANIKO_IMAGE}
  variables:
    DOCKERFILE_CONTEXT: .
    DOCKERFILE_NAME: Dockerfile
    KANIKO_EXECUTOR: /kaniko/executor
  artifacts:
    reports:
      dotenv: ${CI_JOB_NAME_SLUG}.env
  script:
  - # Declare functions
    - |-
      list_append() {
        local list=${1}; shift
        local items=$(eval echo $"${list}")
        eval ${list}=\"${items:+${items} }${@}\"
      }
  - # Sanitize variables
    - TAG_PATTERN_VERSION=${TAG_PATTERN_VERSION#/*}
    - TAG_PATTERN_VERSION=${TAG_PATTERN_VERSION%/*}
  - # Set container image related variables
    - CONTAINER_IMAGE_BASE_NAME=${CONTAINER_IMAGE_BASE_NAME:-$CI_PROJECT_PATH_SLUG}
    - CONTAINER_IMAGE_REPOSITORY="${CONTAINER_IMAGE_REGISTRY}/${CONTAINER_IMAGE_BASE_NAME}"
    - if [ ! ${CONTAINER_IMAGE_TAG} ]; then
    - # Build container image tag if it is not defined yet
      - if [ "${CI_COMMIT_REF_NAME}" == "${CI_DEFAULT_BRANCH}" ]; then
      - # Build container image tag for default branch
        - CONTAINER_IMAGE_TAG=''
      - elif ( echo $CI_COMMIT_TAG | grep -Eq $TAG_PATTERN_VERSION ); then
      - # Build container image tag for versioned tag branch
        - CONTAINER_IMAGE_TAG=${CI_COMMIT_TAG#v}
      - else
      - # Build container image tag and labels for development branch
        - CONTAINER_IMAGE_TAG=$CI_COMMIT_REF_SLUG
        - list_append CONTAINER_IMAGE_LABELS com.jfrog.artifactory.retention.maxDays=30
      - fi
    - fi
    - CONTAINER_IMAGE_NAME="${CONTAINER_IMAGE_REPOSITORY}${CONTAINER_IMAGE_TAG:+:${CONTAINER_IMAGE_TAG}}"
    - >-
      list_append CONTAINER_IMAGE_LABELS
      "org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
      "org.opencontainers.image.revision=${CI_COMMIT_SHA}"
      "org.opencontainers.image.source=${CI_PROJECT_URL}"
      "org.opencontainers.image.vendor=ViaPath"
      "org.opencontainers.image.version=${CI_COMMIT_TAG:-g${CI_COMMIT_SHORT_SHA}}"
  - # Authorize to container image registry
    - >-
      CONTAINER_IMAGE_REGISTRY_AUTH=$(echo -n
      ${CONTAINER_IMAGE_REGISTRY_USER}:${CONTAINER_IMAGE_REGISTRY_PASSWORD} | base64)
    - mkdir -p /kaniko/.docker/
    - >-
      echo
      "{\"auths\":{\"${CONTAINER_IMAGE_REGISTRY/\/*}\":{\"auth\":\"${CONTAINER_IMAGE_REGISTRY_AUTH}\"}}}"
      > /kaniko/.docker/config.json
  - # Build and publish container image
    - >-
      KANIKO_CMD_BUILD_ARGS=$(echo "$CONTAINER_IMAGE_BUILD_ARGS" | while read BUILD_ARG; do
      echo "${BUILD_ARG:+--build-arg=$BUILD_ARG}"; done)
    - >-
      KANINKO_CMD_LABELS=$(for LABEL in ${CONTAINER_IMAGE_LABELS}; do
      echo "--label=${LABEL}"; done)
    - >-
      ${KANIKO_EXECUTOR}
      ${CONTAINER_IMAGE_NAME:+--destination=${CONTAINER_IMAGE_NAME}}
      ${DOCKERFILE_CONTEXT:+--context=${DOCKERFILE_CONTEXT}}
      ${DOCKERFILE_NAME:+--dockerfile=${DOCKERFILE_NAME}}
      $KANIKO_CMD_BUILD_ARGS
      $KANIKO_CMD_LABELS
  - # Store variables into artifact to pass them to downstream jobs
    - echo CONTAINER_IMAGE_NAME=$CONTAINER_IMAGE_NAME >> ${CI_JOB_NAME_SLUG}.env
    - echo CONTAINER_IMAGE_REPOSITORY=$CONTAINER_IMAGE_REPOSITORY >> ${CI_JOB_NAME_SLUG}.env
    - echo CONTAINER_IMAGE_TAG=$CONTAINER_IMAGE_TAG >> ${CI_JOB_NAME_SLUG}.env

.kaniko clone container image job:
  extends: .kaniko build container image job
  script:
  - >- # Overwrite Dockerfile content
    echo FROM ${SOURCE_CONTAINER_IMAGE_NAME}
    > ${DOCKERFILE_CONTEXT:=.}/${DOCKERFILE_NAME:=Dockerfile}
  - !reference [.kaniko build container image job, script]
