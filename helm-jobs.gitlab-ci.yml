variables:
  HELM_CHART_PATH: .
  HELM_RELEASE_NAME: ${CI_PROJECT_PATH_SLUG}-${CI_COMMIT_REF_SLUG}
  HELM_REPO_PASSWORD: $ARTIFACTORY_PASSWORD
  HELM_REPO_URL: https://artifactory.gtl.net/artifactory/helm-local
  HELM_REPO_USERNAME: $ARTIFACTORY_USERNAME
  VERSION_TAG_PATTERN: /^v(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*)){2}($|-[0-9a-zA-Z-]+$)/

.job scripts:
  sanitize chart variables:
  -
    - VERSION_TAG_PATTERN=${VERSION_TAG_PATTERN#/*}
    - VERSION_TAG_PATTERN=${VERSION_TAG_PATTERN%/*}
  - |-
    if echo $HELM_CHART_VERSION | grep -Eq $VERSION_TAG_PATTERN; then
      HELM_CHART_VERSION=${HELM_CHART_VERSION#v}
    fi
  -
    - HELM_CHART_VERSION=${HELM_CHART_VERSION//'@{HELM_CHART_SOURCE_VERSION}'/$HELM_CHART_SOURCE_VERSION}
    - HELM_CHART_VERSION=${HELM_CHART_VERSION//'@{HELM_CHART_APP_VERSION}'/$HELM_CHART_APP_VERSION}
    - HELM_CHART_VERSION=${HELM_CHART_VERSION:-$HELM_CHART_SOURCE_VERSION}
  sanitize variables:
  - HELM_NAMESPACE=${HELM_NAMESPACE:-$CI_ENVIRONMENT_SLUG}
  -
    - HELM_RELEASE_NAME=${HELM_RELEASE_NAME:0:53}
    - HELM_RELEASE_NAME=${HELM_RELEASE_NAME%-}

.helm job:
  image: ${ARTIFACTORY_URL}/dkr/devops-tools-helm-job-runner
  artifacts:
    name: ${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME_SLUG}-${CI_COMMIT_REF_SLUG}

.lint chart job:
  extends: .helm job
  stage: .pre
  script:
  - >- # Update chart dependencies listed in Chart.yaml
    helm dependency update $HELM_CHART_PATH
    --debug
  - >- # Run a series of tests to verify that the chart is well-formed
    helm lint $HELM_CHART_PATH
    --debug

.package chart job:
  extends: .helm job
  stage: build
  rules:
  - if: $CI_COMMIT_TAG =~ $VERSION_TAG_PATTERN
    variables:
      HELM_CHART_VERSION: $CI_COMMIT_TAG
  - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    variables:
      HELM_CHART_VERSION: "@{HELM_CHART_SOURCE_VERSION}"
  - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
    variables:
      HELM_CHART_VERSION: "@{HELM_CHART_SOURCE_VERSION}-${CI_COMMIT_REF_SLUG}"
  artifacts:
    paths:
    - "*.tgz"
    reports:
      dotenv: ${CI_JOB_NAME_SLUG}.env
  script:
  - # Define chart definition related variables
    - HELM_CHART_NAME=$(helm show chart $HELM_CHART_PATH | grep '^name:' | cut -d':' -f2 | tr -d '[:space:]')
    - HELM_CHART_SOURCE_VERSION=$(helm show chart $HELM_CHART_PATH | grep '^version:' | cut -d':' -f2 | tr -d '[:space:]')
    - |-
      if [ -z "$HELM_CHART_APP_VERSION" ]; then
        HELM_CHART_APP_VERSION=$UPSTREAM_COMMIT_REF_SLUG
      fi
  - !reference [.job scripts, sanitize chart variables]
  - >- # Update chart dependencies listed in Chart.yaml
    helm dependency update $HELM_CHART_PATH
    --debug
  - >- # Package a chart into a versioned chart archive file
    helm package $HELM_CHART_PATH
    --debug
    --dependency-update
    ${HELM_CHART_APP_VERSION:+--app-version=$HELM_CHART_APP_VERSION}
    ${HELM_CHART_VERSION:+--version=${HELM_CHART_VERSION}}
  - |- # Store variables into artifact to pass them to further jobs
    (
      echo HELM_CHART_NAME=$HELM_CHART_NAME
      echo HELM_CHART_PACKAGE=${HELM_CHART_NAME}-${HELM_CHART_VERSION}.tgz
      echo HELM_CHART_SOURCE_VERSION=$HELM_CHART_SOURCE_VERSION
      echo HELM_CHART_VERSION=$HELM_CHART_VERSION
    ) >> ${CI_JOB_NAME_SLUG}.env

.push chart to artifactory job:
  extends: .helm job
  stage: deploy
  resource_group: $CI_JOB_NAME $CI_COMMIT_REF_NAME
  artifacts:
    reports:
      dotenv: ${CI_JOB_NAME_SLUG}.env
  script:
  - >- # Push chart package to Artifactory
    helm push-artifactory $HELM_CHART_PACKAGE $HELM_REPO_URL
  - !reference [.job scripts, sanitize chart variables]
  - |- # Store variables into artifact to pass them to further jobs
    (
      echo HELM_CHART_NAME=$HELM_CHART_NAME
      echo HELM_CHART_PACKAGE_URL=${HELM_REPO_URL}/${HELM_CHART_NAME}/${HELM_CHART_PACKAGE}
      echo HELM_CHART_PACKAGE_VERSION=$HELM_CHART_VERSION
      echo HELM_CHART_SOURCE_VERSION=$HELM_CHART_SOURCE_VERSION
    ) >> ${CI_JOB_NAME_SLUG}.env

.helm chart release job:
  extends: .helm job
  before_script:
  - !reference [.job scripts, sanitize variables]
  after_script:
  - !reference [.job scripts, sanitize variables]

.upgrade helm chart release job:
  extends: .helm chart release job
  stage: deploy
  environment:
    action: start
  resource_group: $CI_JOB_NAME $CI_ENVIRONMENT_NAME
  script:
  - >- # Install or upgrade the release
    helm upgrade
    $HELM_RELEASE_NAME
    $HELM_CHART_PATH
    --create-namespace
    --debug
    --dependency-update
    --install
    --wait
    ${HELM_CHART_REPO:+--repo=${HELM_CHART_REPO}}
    ${HELM_CHART_VERSION:+--version=${HELM_CHART_VERSION}}
    ${HELM_NAMESPACE:+--namespace=${HELM_NAMESPACE}}
    ${HELM_TIMEOUT:+--timeout=${HELM_TIMEOUT}}
  - >- # Run tests for the release
    helm test
    $HELM_RELEASE_NAME
    ${HELM_NAMESPACE:+--namespace=${HELM_NAMESPACE}}
  after_script:
  - !reference [.helm chart release job, after_script]
  - |- # When job is failed printout the release pods containers logs
    if [ "$CI_JOB_STATUS" == 'failed' ]; then
      kubectl \
        --namespace=$HELM_NAMESPACE \
        logs \
        --all-containers=true \
        --prefix=true \
        --selector="app.kubernetes.io/instance=${HELM_RELEASE_NAME}" \
        --tail=-1 \
        --timestamps=true
    fi

.uninstall helm chart release job:
  extends: .helm chart release job
  when: manual
  stage: .post
  environment:
    action: stop
  resource_group: !reference [.upgrade helm chart release job, resource_group]
  variables:
    GIT_STRATEGY: none
  script:
  - >- # Remove all resources associated with the specified release
    helm uninstall
    $HELM_RELEASE_NAME
    ${HELM_NAMESPACE:+--namespace=${HELM_NAMESPACE}}
    ${HELM_TIMEOUT:+--timeout=${HELM_TIMEOUT}}
    --wait
