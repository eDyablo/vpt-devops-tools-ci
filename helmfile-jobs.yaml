variables:
  HELMFILE_VALUES_FILE_SRC: .gitlab-ci.values.yaml
  KUBE_CONTEXT: ' ' # use runner's default kubernetes settings

.helmfile job:
  image: ${ARTIFACTORY_URL}/dkr/devops-tools-helmfile-job-runner
  before_script:
  - 
    - echo "$HELMFILE_ENVS"
    - $HELMFILE_ENVS
  - > # Set environment variables
    HELMFILE_ENVIRONMENT=${HELMFILE_ENVIRONMENT:-$CI_ENVIRONMENT_SLUG}
  - > # Render helmfile values file
    [ $HELMFILE_VALUES_FILE_SRC ]
    && ([ -f "$HELMFILE_VALUES_FILE_SRC" ]
    && eval "echo \"$(cat $HELMFILE_VALUES_FILE_SRC)\""
    || echo '')
    > ${HELMFILE_VALUES_FILE_SRC}.rendered
    && HELMFILE_VALUES_FILE=${HELMFILE_VALUES_FILE_SRC}.rendered

.deploy helmfile job:
  extends: .helmfile job
  stage: deploy
  environment:
    action: start
  resource_group: $CI_ENVIRONMENT_NAME
  artifacts:
    name: ${CI_PROJECT_PATH_SLUG}-${CI_COMMIT_REF_SLUG}
    paths:
    - $HELMFILE_VALUES_FILE_SRC
    - deploy.env
    - helmfile.yaml
    - infrastructure/**/*
    reports:
      dotenv: deploy.env
    when: always
  script:
  - | # list releases defined in state file
    helmfile list \
    --skip-charts \
    ${HELMFILE_ENVIRONMENT:+--environment=$HELMFILE_ENVIRONMENT} \
    ${DEPLOYMENT_SELECTORS:=$(for deployment_name in $SELECT_DEPLOYMENT; do \
      ${deployment_name:+echo --selector=deployment=${deployment_name}}; done)} \
    ${HELMFILE_VALUES_FILE:+--state-values-file=$HELMFILE_VALUES_FILE}
  - > # lint charts from state file
    helmfile lint
    ${HELMFILE_ENVIRONMENT:+--environment=$HELMFILE_ENVIRONMENT}
    ${HELMFILE_VALUES_FILE:+--state-values-file=$HELMFILE_VALUES_FILE}
    $DEPLOYMENT_SELECTORS
  - | # apply all resources from state file only when there are changes
    deployments=$(
      helmfile list \
        --allow-no-matching-release \
        --output=json \
        --skip-charts --skip-deps \
        ${HELMFILE_ENVIRONMENT:+--environment=$HELMFILE_ENVIRONMENT} \
        ${HELMFILE_VALUES_FILE:+--state-values-file=$HELMFILE_VALUES_FILE} \
        $DEPLOYMENT_SELECTORS \
      | jq -r '.[].labels | select(. | contains("deployment:")) | match("deployment:([^,]+)").captures[0].string' \
      | sort | uniq
    )
    deploy() {
      helmfile apply \
        --allow-no-matching-release \
        --selector=deployment=$1 \
        ${HELMFILE_ENVIRONMENT:+--environment=$HELMFILE_ENVIRONMENT} \
        ${HELMFILE_VALUES_FILE:+--state-values-file=$HELMFILE_VALUES_FILE}
    }
    pids=
    for deployment in $deployments; do
      (deploy $deployment) & pids="$pids $!"
    done
    pcode=0
    for pid in $pids; do
      if ! wait $pid; then
        pcode=$((pcode + 1))
      fi
    done
    [ $pcode -eq 0 ] || exit $pcode
  - > # test charts from state file
    helmfile test
    ${HELMFILE_ENVIRONMENT:+--environment=$HELMFILE_ENVIRONMENT}
    ${HELMFILE_VALUES_FILE:+--state-values-file=$HELMFILE_VALUES_FILE}
    $DEPLOYMENT_SELECTORS
  after_script:
  - | # write envs
    (
      echo "DEPLOYMENT_NAME_PREFIX=${DEPLOYMENT_NAME_PREFIX}"
      echo "DEPLOYMENT_NAME_SUFFIX=${DEPLOYMENT_NAME_SUFFIX}"
      echo "HELMFILE_ENVIRONMENT=${HELMFILE_ENVIRONMENT}"
      echo "HELMFILE_SELECTORS='${DEPLOYMENT_SELECTORS//$'\n'/ }'"
    ) >> deploy.env
  - | # when job is failed printout the releases pods containers logs
    if [ "$CI_JOB_STATUS" == 'failed' ]; then
      releases=$(helmfile list \
        --output=json \
        --skip-charts --skip-deps \
        ${HELMFILE_ENVIRONMENT:+--environment=$HELMFILE_ENVIRONMENT} \
        ${HELMFILE_VALUES_FILE:+--state-values-file=$HELMFILE_VALUES_FILE} \
        $DEPLOYMENT_SELECTORS \
        | jq -r '.[] | select(.installed and .enabled) | "\(.namespace)/\(.name)"'
      )
      for release in $releases; do
        release_name=${release#*\/}
        release_namespace=${release%\/*}
        kubectl \
          --namespace=$release_namespace \
          logs \
          --all-containers=true \
          --prefix=true \
          --selector="app.kubernetes.io/instance=$release_name" \
          --tail=-1 \
          --timestamps=true
      done
    fi

.destroy helmfile job:
  extends: .helmfile job
  stage: .post
  when: manual
  environment:
    action: stop
  resource_group: !reference [.deploy helmfile job, resource_group]
  variables:
    GIT_STRATEGY: none
  before_script:
  - | # read deploy envs
    if [ -f deploy.env ]; then
      set -o allexport
      source deploy.env
      set +o allexport
    fi
  - !reference [.helmfile job, before_script]
  script:
  - > # list releases defined in state file
    helmfile list
    --skip-charts
    ${HELMFILE_ENVIRONMENT:+--environment=$HELMFILE_ENVIRONMENT}
    ${HELMFILE_VALUES_FILE:+--state-values-file=$HELMFILE_VALUES_FILE}
    $HELMFILE_SELECTORS
  - > # destroy and then purge releases
    helmfile destroy
    --skip-charts
    ${HELMFILE_ENVIRONMENT:+--environment=$HELMFILE_ENVIRONMENT}
    ${HELMFILE_VALUES_FILE:+--state-values-file=$HELMFILE_VALUES_FILE}
    $HELMFILE_SELECTORS
